import java.time.format.DateTimeFormatter
import java.time.ZonedDateTime
import java.time.ZoneOffset

pipeline {
    agent any
    
    tools{
        maven "m3"
    }
    
    environment{
        DOCKERHUB_CREDENTIALS = credentials("dockerhub-imolasportiva")
        JENKINS_PATH = "/home/jenkins_home/jenkins/workspace/imolasportiva/CI_imolasportiva"
        SCANNER_HOME = tool 'sonarscanner'
    }
    
    stages {
        stage('Git') {
            steps {
                git branch: "${branch}", url: "https://github.com/DavideDeRosa/imolasportiva/"
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn clean install"
            }
        }
        
        stage('SonarQube') {
            steps {
                withSonarQubeEnv('sonarqube_imolasportiva'){
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=imolasportiva \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=imolasportiva '''
                }
                
                waitForQualityGate abortPipeline: true
            }
        }
        
        stage('Download Dockerfile and properties') {
            steps {
                sh "curl --location '${dockerfile_url}' --output ${JENKINS_PATH}/Dockerfile"
                sh "curl --location '${properties_url}' --output ${JENKINS_PATH}/application.properties"
            }
        }
        
        stage('Copy .jar') {
            steps {
                sh "cp -r ${JENKINS_PATH}/target/*.jar ${JENKINS_PATH}/"
                sh "mv *.jar imolasportiva.jar"
            }
        }
        
        stage('Docker Login') {
            steps {
                sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script{
                    def pomXml = readFile('pom.xml')
                    def version = pomXml =~ '<version>(.*?)</version>'
                    version = version ? version[0][1] : ''
                    
                    echo "Version: ${version}"
                    
                    def formattedDate = ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("yyyyMMdd-HHmmss"))
                    
                    version = version.replaceAll('-SNAPSHOT', '')
                    
                    def tag = version + "-" + formattedDate
                    
                    echo "${tag}"
                    
                    sh "docker build -t davidederosa24/imolasportiva:${tag} ."
                    sh "docker build -t davidederosa24/imolasportiva:latest ."
                    sh "docker push davidederosa24/imolasportiva:${tag}"
                    sh "docker push davidederosa24/imolasportiva:latest"
                    
                    sh "docker rmi -f davidederosa24/imolasportiva:${tag}"
                    sh "docker rmi -f davidederosa24/imolasportiva:latest"
                }
            }
        }
    }
    
    post{
        always{
            sh "docker logout"
            sh "rm -rf ${JENKINS_PATH}/*.jar"
            sh "rm -rf ${JENKINS_PATH}/Dockerfile"
            sh "rm -rf ${JENKINS_PATH}/application.properties"
        }
    }
}